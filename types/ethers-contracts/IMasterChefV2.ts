/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IMasterChefV2 {
  export type PoolInfoStruct = {
    accSushiPerShare: BigNumberish;
    lastRewardBlock: BigNumberish;
    allocPoint: BigNumberish;
  };

  export type PoolInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    accSushiPerShare: BigNumber;
    lastRewardBlock: BigNumber;
    allocPoint: BigNumber;
  };
}

export interface IMasterChefV2Interface extends utils.Interface {
  contractName: "IMasterChefV2";

  functions: {
    "lpToken(uint256)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "lpToken" | "poolInfo"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "lpToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;

  events: {};
}

export interface IMasterChefV2 extends BaseContract {
  contractName: "IMasterChefV2";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMasterChefV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lpToken(poolId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IMasterChefV2.PoolInfoStructOutput]>;
  };

  lpToken(poolId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  poolInfo(
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMasterChefV2.PoolInfoStructOutput>;

  callStatic: {
    lpToken(poolId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMasterChefV2.PoolInfoStructOutput>;
  };

  filters: {};

  estimateGas: {
    lpToken(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lpToken(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
