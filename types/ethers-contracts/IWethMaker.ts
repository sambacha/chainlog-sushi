/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IWethMakerInterface extends utils.Interface {
  contractName: "IWethMaker";

  functions: {
    "bridges(address)": FunctionFragment;
    "burnPairs(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "owner()": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "bridges" | "burnPairs" | "owner" | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bridges", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burnPairs",
    values: [string[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bridges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnPairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "SetTrusted(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetTrusted"): EventFragment;
}

export interface SetTrustedEventObject {
  user: string;
  isTrusted: boolean;
}
export type SetTrustedEvent = TypedEvent<
  [string, boolean],
  SetTrustedEventObject
>;

export type SetTrustedEventFilter = TypedEventFilter<SetTrustedEvent>;

export interface IWethMaker extends BaseContract {
  contractName: "IWethMaker";

  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWethMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridges(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    burnPairs(
      lpTokens: string[],
      amounts: BigNumberish[],
      minimumOut0: BigNumberish[],
      minimumOut1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      token: string,
      to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bridges(arg0: string, overrides?: CallOverrides): Promise<string>;

  burnPairs(
    lpTokens: string[],
    amounts: BigNumberish[],
    minimumOut0: BigNumberish[],
    minimumOut1: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdraw(
    token: string,
    to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bridges(arg0: string, overrides?: CallOverrides): Promise<string>;

    burnPairs(
      lpTokens: string[],
      amounts: BigNumberish[],
      minimumOut0: BigNumberish[],
      minimumOut1: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdraw(
      token: string,
      to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetTrusted(address,bool)"(
      user?: string | null,
      isTrusted?: null
    ): SetTrustedEventFilter;
    SetTrusted(user?: string | null, isTrusted?: null): SetTrustedEventFilter;
  };

  estimateGas: {
    bridges(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    burnPairs(
      lpTokens: string[],
      amounts: BigNumberish[],
      minimumOut0: BigNumberish[],
      minimumOut1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridges(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnPairs(
      lpTokens: string[],
      amounts: BigNumberish[],
      minimumOut0: BigNumberish[],
      minimumOut1: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
