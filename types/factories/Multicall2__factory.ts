/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multicall2, Multicall2Interface } from "../Multicall2";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall2.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610baa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610184578063c3077fa9146101a4578063ee82ac5e146101b757600080fd5b806372425d9d1461016a57806386d516e814610170578063a8b0574e1461017657600080fd5b8063399542e9116100b2578063399542e91461011a57806342cbb15c1461013c5780634d2301cc1461014257600080fd5b80630f28c97d146100d9578063252dba42146100f157806327e86d6e14610112575b600080fd5b425b6040516100e8919061050f565b60405180910390f35b6101046100ff36600461078b565b6101c9565b6040516100e89291906108a1565b6100db610332565b61012d6101283660046108d4565b610345565b6040516100e8939291906109ce565b436100db565b6100db6101503660046109fb565b73ffffffffffffffffffffffffffffffffffffffff163190565b446100db565b456100db565b416040516100e89190610a25565b6101976101923660046108d4565b61035d565b6040516100e89190610a33565b61012d6101b236600461078b565b6104ea565b6100db6101c5366004610a55565b4090565b8051439060609067ffffffffffffffff8111156101e8576101e8610523565b60405190808252806020026020018201604052801561021b57816020015b60608152602001906001900390816102065790505b50905060005b835181101561032c5760008085838151811061023f5761023f610a76565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1686848151811061027357610273610a76565b60200260200101516020015160405161028c9190610aae565b6000604051808303816000865af19150503d80600081146102c9576040519150601f19603f3d011682016040523d82523d6000602084013e6102ce565b606091505b5091509150816102f95760405162461bcd60e51b81526004016102f090610aba565b60405180910390fd5b8084848151811061030c5761030c610a76565b60200260200101819052505050808061032490610b0a565b915050610221565b50915091565b600061033f600143610b25565b40905090565b4380406060610354858561035d565b90509250925092565b6060815167ffffffffffffffff81111561037957610379610523565b6040519080825280602002602001820160405280156103bf57816020015b6040805180820190915260008152606060208201528152602001906001900390816103975790505b50905060005b82518110156104e3576000808483815181106103e3576103e3610a76565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1685848151811061041757610417610a76565b6020026020010151602001516040516104309190610aae565b6000604051808303816000865af19150503d806000811461046d576040519150601f19603f3d011682016040523d82523d6000602084013e610472565b606091505b5091509150851561049a578161049a5760405162461bcd60e51b81526004016102f090610b3c565b60405180604001604052808315158152602001828152508484815181106104c3576104c3610a76565b6020026020010181905250505080806104db90610b0a565b9150506103c5565b5092915050565b60008060606104fa600185610345565b9196909550909350915050565b805b82525050565b6020810161051d8284610507565b92915050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561055f5761055f610523565b6040525050565b600061057160405190565b905061057d8282610539565b919050565b600067ffffffffffffffff82111561059c5761059c610523565b5060209081020190565b600073ffffffffffffffffffffffffffffffffffffffff821661051d565b6105cd816105a6565b81146105d857600080fd5b50565b803561051d816105c4565b600067ffffffffffffffff82111561060057610600610523565b601f19601f83011660200192915050565b82818337506000910152565b600061063061062b846105e6565b610566565b90508281526020810184848401111561064b5761064b600080fd5b610656848285610611565b509392505050565b600082601f83011261067257610672600080fd5b813561068284826020860161061d565b949350505050565b60006040828403121561069f5761069f600080fd5b6106a96040610566565b905060006106b784846105db565b825250602082013567ffffffffffffffff8111156106d7576106d7600080fd5b6106e38482850161065e565b60208301525092915050565b60006106fd61062b84610582565b8381529050602080820190840283018581111561071c5761071c600080fd5b835b8181101561075d57803567ffffffffffffffff81111561074057610740600080fd5b80860161074d898261068a565b855250506020928301920161071e565b5050509392505050565b600082601f83011261077b5761077b600080fd5b81356106828482602086016106ef565b6000602082840312156107a0576107a0600080fd5b813567ffffffffffffffff8111156107ba576107ba600080fd5b61068284828501610767565b60005b838110156107e15781810151838201526020016107c9565b838111156107f0576000848401525b50505050565b6000610800825190565b8084526020840193506108178185602086016107c6565b601f01601f19169290920192915050565b600061083483836107f6565b9392505050565b6000610845825190565b8084526020840193508360208202850161085f8560200190565b8060005b85811015610894578484038952815161087c8582610828565b94506020830160209a909a0199925050600101610863565b5091979650505050505050565b604081016108af8285610507565b8181036020830152610682818461083b565b8015156105cd565b803561051d816108c1565b600080604083850312156108ea576108ea600080fd5b60006108f685856108c9565b925050602083013567ffffffffffffffff81111561091657610916600080fd5b61092285828601610767565b9150509250929050565b801515610509565b80516000906040840190610948858261092c565b506020830151848203602086015261096082826107f6565b95945050505050565b60006108348383610934565b600061097f825190565b808452602084019350836020820285016109998560200190565b8060005b8581101561089457848403895281516109b68582610969565b94506020830160209a909a019992505060010161099d565b606081016109dc8286610507565b6109e96020830185610507565b81810360408301526109608184610975565b600060208284031215610a1057610a10600080fd5b600061068284846105db565b610509816105a6565b6020810161051d8284610a1c565b602080825281016108348184610975565b806105cd565b803561051d81610a44565b600060208284031215610a6a57610a6a600080fd5b60006106828484610a4a565b634e487b7160e01b600052603260045260246000fd5b6000610a96825190565b610aa48185602086016107c6565b9290920192915050565b60006108348284610a8c565b60208082528181019081527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460408301526060820161051d565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610b1e57610b1e610af4565b5060010190565b600082821015610b3757610b37610af4565b500390565b6020808252810161051d81602181527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560208201527f640000000000000000000000000000000000000000000000000000000000000060408201526060019056fea164736f6c6343000809000a";

type Multicall2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall2__factory extends ContractFactory {
  constructor(...args: Multicall2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multicall2> {
    return super.deploy(overrides || {}) as Promise<Multicall2>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall2 {
    return super.attach(address) as Multicall2;
  }
  override connect(signer: Signer): Multicall2__factory {
    return super.connect(signer) as Multicall2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall2Interface {
    return new utils.Interface(_abi) as Multicall2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall2 {
    return new Contract(address, _abi, signerOrProvider) as Multicall2;
  }
}
